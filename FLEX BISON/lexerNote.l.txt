%{
#include <stdio.h>
#include <stdlib.h>

int yylex(void);
void yyerror(char *);

%}

%%

[_a-zA-Z][_a-zA-Z0-9]* { yylval = yytext; return T_ID; }
[1-9][0-9]*    { yylval = yytext; return T_NUMCONST; }
"+"           { return T_PLUS; }
"-"           { return T_MINUS; }
"*"           { return T_MULT; }
"/"           { return T_DIV; }
"="           { return T_ASSIG; }
","           { return T_COMMA; }
"("           { return T_LPAREN; }
")"           { return T_RPAREN; }
"["           { return T_LBRACKET; }
"]"           { return T_RBRACKET; }
";"           { return T_SEMICOLON; }
"||"           { return T_OR; }
"&&"           { return T_AND; }
"!="           { return T_NOTEQUAL; }
">"            { return T_GREATER; }
">="           { return T_GREATER_EQUAL; }
"<"            { return T_LESS; }
"<="           { return T_LESS_EQUAL; }
"!"           { return T_NOT; }
if            { return T_IF; }
else           { return T_ELSE; }
while          { return T_WHILE; }
for          { return T_FOR; }
true           { return T_TRUE; }
false          { return T_FALSE; }
[0-9]+         { yylval = yytext; return T_NUMBER; }
[a-zA-Z_]+     { yylval = yytext; return T_STRING; }
int|char|bool|float|double { return DATATYPE; }
void { return T_VOID; }
return { return T_RETURN; }
"\n"          { return T_EOL; }
[ \t\r]       { /* ignore whitespace */ }
.             { yyerror("Invalid character"); }

%%

int main(int argc, char *argv[]) {
    yylex();
    return 0;
}

void yyerror(char *s) {
    printf("Error: %s\n", s);
    exit(1);
}